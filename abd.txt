# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Development Commands

### Essential Commands
- `npm run dev` - Start development server on port 3000
- `npm run build` - Build for production (runs TypeScript compiler + Vite)
- `npm run preview` - Preview production build locally
- `npm test` - Run unit tests with Vitest
- `npm run test:ui` - Run tests with UI
- `npm run test:coverage` - Run tests with coverage report

### Code Quality
- `npm run lint` - Run ESLint
- `npm run lint:fix` - Fix ESLint issues automatically
- `npm run format` - Format code with Prettier
- `npm run format:check` - Check code formatting
- `npm run stylelint` - Lint CSS files
- `npm run stylelint:fix` - Fix CSS lint issues

### Testing
- `npm run test:run` - Run tests once
- `npm run test:watch` - Run tests in watch mode
- `npm run test:all` - Run all tests (alias for test:run)
- `npx vitest run path/to/test.test.ts` - Run a single test file

### E2E Testing
- `npx cypress open` - Open Cypress test runner
- `npx cypress run` - Run Cypress tests headlessly

### Complete Development Setup
- `npm run all` - Clean, install, lint, format, stylelint, and build

## Architecture Overview

### Tech Stack
- **Framework**: React 18 with TypeScript
- **Build Tool**: Vite with TypeScript compilation
- **State Management**: Zustand for global state
- **Data Fetching**: TanStack Query (React Query)
- **Routing**: React Router v6
- **UI Components**: Radix UI primitives + custom components
- **Styling**: Tailwind CSS with custom CSS modules
- **Testing**: Vitest + React Testing Library + Cypress

### Project Structure
This is a GitHub Actions workflow wizard that helps users create security scanning workflows for Black Duck, Coverity, and Polaris platforms.

#### Core Application Flow
1. **Authentication** (`src/pages/github-login/`) - GitHub OAuth login
2. **Repository Selection** (`src/pages/repository-config/`) - Choose org/repo
3. **Workflow Configuration** (`src/pages/config-workflow/`) - Configure scan settings
4. **YAML Generation** (`src/pages/workflow-yml/`) - Generate and edit workflow YAML
5. **Summary** (`src/pages/scm-summary-wizard/`) - Review and deploy

#### Key Components
- **Step System**: Multi-step wizard using `src/components/steps/` with registry-based routing
- **State Management**: Zustand stores in `src/stores/` for auth, config, GitHub data
- **Workflow Generation**: Platform-specific YAML generation in `src/config/workflows/workflow-mappings.ts`
  - Supports both regular GitHub Actions and Bridge CLI workflows
  - Dynamic configuration merging with `addPlatformSpecificConfig()`
- **Error Handling**: Global error boundaries and session management
  - Custom ErrorBoundary class component in Router with auto-refresh capability
  - Comprehensive error logging and user-friendly error displays

### Configuration Management
- **Environment**: `src/config/env.ts` - Centralized env var management with validation
  - Includes `apiBasePath` configuration for API routing
  - Validates required environment variables on startup
- **Build Config**: Vite config with TypeScript paths, custom CSS setup, and chunk optimization
- **TypeScript**: Base config in `.config/tsconfig/` with path aliases (`@/*` â†’ `src/*`)

### Security Scanning Platforms
The app supports three security platforms:
- **Black Duck SCA**: Software composition analysis
- **Coverity**: Static application security testing
- **Polaris**: Multi-platform security scanning

Each platform has specific workflow templates and Bridge CLI configurations in `workflow-mappings.ts`. The workflow generation system supports:
- Regular GitHub Actions workflows via `generateWorkflowYaml()`
- Bridge CLI workflows via `generateWorkflowYamlBridgeCLI()` with enhanced `runsOn` parameter support
- Custom step and configuration injection

### Session Management
- Automatic session timeout handling
- Session storage utilities in `src/utils/session/`
- Authentication state persistence with Zustand

### API Integration
- GitHub API integration for repository management
- Modular API client architecture in `src/services/`
- Request/response handling with Axios and React Query

## Development Notes

### File Structure Conventions
- Components are organized by type: `data-display/`, `forms/`, `layout/`, `navigation/`
- Pages follow feature-based organization
- Stores use Zustand with persistence middleware
- Utilities are grouped by functionality

### Testing Strategy
- Unit tests for components, stores, and utilities
- E2E tests for complete user workflows
- Test files co-located with source files in `__tests__/` directories
- Comprehensive test coverage for utilities like MIME handler with error scenarios

### Environment Variables
Required environment variables must be defined in Vite format (`VITE_*`). Key variables include:
- `VITE_API_BASE_URL` - Base API URL
- `VITE_API_BASE_PATH` - API base path (defaults to `/`)
- `VITE_DOCUMENTATION_BASE_URL` - Documentation URL
- `VITE_BLACK_DUCK_PLUGIN_URL` - Plugin URL
- `VITE_ENV_URL` - Environment URL
- `VITE_SCM_TYPE` - SCM type (defaults to `github`)

See `src/config/env.ts` for the complete list and validation logic.

### Build Optimization
- Code splitting with manual chunks for vendor libraries
- SVG handling with vite-plugin-svgr
- Development vs production build differences in minification and source maps
- Dynamic base path configuration via `VITE_API_BASE_PATH` environment variable
- Enhanced security headers in both Vite dev server and nginx production config

## Code Patterns and Conventions

### ESLint Configuration
The project uses `@antfu/eslint-config` with strict TypeScript rules. Key patterns:
- Prefer explicit imports and avoid wildcard imports where possible
- Use `node/prefer-global/process` rule - access `process.env` with ESLint disable comments
- TypeScript errors are handled with `@ts-expect-error` comments for known issues

### Environment-Aware Development
- Development vs production behavior controlled by `env.isDevelopment` flag
- Development-only console logging and debugging tools
- Conditional loading of dev tools and debugging components

### Error Handling Patterns
- Class-based ErrorBoundary components for complex error handling logic
- Automatic error recovery with configurable refresh delays
- Comprehensive error logging with structured logger utility
- User-friendly error displays with actionable recovery options

### Configuration Management
- Centralized environment configuration with validation at startup
- Type-safe configuration interfaces with comprehensive JSDoc
- Fallback values for optional environment variables
- Runtime validation of required environment variables
